# this config is created through command
# mixgen adapter -c $GOPATH/src/github.com/apigee/istio-mixer-adapter/adapter/config/config.proto_descriptor -o $GOPATH/src/github.com/apigee/istio-mixer-adapter/adapter/config -n apigee -s=false -t apigee-authorization -t apigee-analytics
apiVersion: "config.istio.io/v1alpha2"
kind: adapter
metadata:
  name: apigee
  namespace: istio-system
spec:
  description: 
  session_based: false
  templates:
  - apigee-authorization
  - apigee-analytics
  config: 
---
