// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: adapter/config/config.proto

/*
	Package config is a generated protocol buffer package.

	The Apigee Mixer adapter provides Apigee's distributed authentication and quota policy checks
	as well as the ingestion of Istio telemetry for analysis and reporting.

	Important: The adapter is provided in an enhanced Mixer image. The default Mixer image must be replaced and the
	proper CRDs must be applied in order to use these features. Complete Apigee documentation on the concepts and usage
	of this adapter is available on the [Apigee Adapter for Istio](https://docs.apigee.com/api-platform/istio-adapter/concepts)
	site. For more information and product support, please [contact Apigee support](https://apigee.com/about/support/portal).

	This adapter supports the [authorization template](https://istio.io/docs/reference/config/policy-and-telemetry/templates/authorization/)
	and Apigee's [analytics template](https://istio.io/docs/reference/config/policy-and-telemetry/templates/analytics/).

	Example config:

	```yaml
	apiVersion: config.istio.io/v1alpha2
	kind: apigee
	metadata:
	  name: apigee-handler
	  namespace: istio-system
	spec:
	  apigee_base: https://istioservices.apigee.net/edgemicro
	  customer_base: https://myorg-test.apigee.net/istio-auth
	  org_name: myorg
	  env_name: test
	  key: 5f1132b7ff037fa187463c324d029ca26de28b7279df0ea161
	  secret: fa147e8afc35219b7e1db688c609196923f663b5e835975
	  temp_dir: "/tmp/apigee-istio"
	  client_timeout: 30s
	  products:
	    refresh_rate: 2m
	  analytics:
	    legacy_endpoint: false
	    file_limit: 1024
	  api_key_claim:
	```

	It is generated from these files:
		adapter/config/config.proto

	It has these top-level messages:
		Params
*/
package config

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf1 "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// The Configuration for the Apigee adapter provides information on how the adapter should contact
// the Apigee proxies and how it should operate. Running the `apigee-istio provision` CLI command
// will ensure that all proxies are installed into your Apigee environment and generate this file
// with all required settings for you.
// For additional information on this adapter or support please contact anchor-prega-support@google.com.
type Params struct {
	// Apigee Base is the URI for a shared proxy on Apigee.
	// Required.
	ApigeeBase string `protobuf:"bytes,1,opt,name=apigee_base,json=apigeeBase,proto3" json:"apigee_base,omitempty"`
	// Customer Base is the URI for an organization-specific proxy on Apigee.
	// Required.
	CustomerBase string `protobuf:"bytes,2,opt,name=customer_base,json=customerBase,proto3" json:"customer_base,omitempty"`
	// Org Name is the name of the organization on Apigee.
	// Required.
	OrgName string `protobuf:"bytes,3,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
	// Env Name is the name of the environment on Apigee.
	// Required.
	EnvName string `protobuf:"bytes,4,opt,name=env_name,json=envName,proto3" json:"env_name,omitempty"`
	// Key is used to authenticate to the Apigee proxy endpoints, generated during provisioning.
	// Required.
	Key string `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	// Secret is used to authenticate to the Apigee proxy endpoints, generated during provisioning.
	// Required.
	Secret string `protobuf:"bytes,6,opt,name=secret,proto3" json:"secret,omitempty"`
	// The local directory to be used by the adapter for temporary files.
	// Optional. Default: "/tmp/apigee-istio".
	TempDir string `protobuf:"bytes,7,opt,name=temp_dir,json=tempDir,proto3" json:"temp_dir,omitempty"`
	// The timeout to be used for adapter requests to Apigee servers.
	// Optional. Default: "30s" (30 seconds).
	ClientTimeout *google_protobuf1.Duration `protobuf:"bytes,8,opt,name=client_timeout,json=clientTimeout" json:"client_timeout,omitempty"`
	// The name of a JWT claim from which to look for an api_key.
	// Optional. Default: none.
	ApiKeyClaim string `protobuf:"bytes,9,opt,name=api_key_claim,json=apiKeyClaim,proto3" json:"api_key_claim,omitempty"`
	// Options specific to to products handling.
	Products *ParamsProductOptions `protobuf:"bytes,15,opt,name=products" json:"products,omitempty"`
	// Options specific to to analytics handling.
	Analytics *ParamsAnalyticsOptions `protobuf:"bytes,16,opt,name=analytics" json:"analytics,omitempty"`
}

func (m *Params) Reset()                    { *m = Params{} }
func (*Params) ProtoMessage()               {}
func (*Params) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{0} }

// Options specific to to products handling.
type ParamsProductOptions struct {
	// The rate at which the list of products is refreshed from Apigee.
	// Optional. Default: "2m" (2 minutes).
	RefreshRate *google_protobuf1.Duration `protobuf:"bytes,1,opt,name=refresh_rate,json=refreshRate" json:"refresh_rate,omitempty"`
}

func (m *ParamsProductOptions) Reset()                    { *m = ParamsProductOptions{} }
func (*ParamsProductOptions) ProtoMessage()               {}
func (*ParamsProductOptions) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{0, 0} }

// Options specific to to analytics handling.
type ParamsAnalyticsOptions struct {
	// If true, use legacy direct communication analytics protocol instead of buffering. Must be true for OPDK.
	// Optional. Default: false.
	LegacyEndpoint bool `protobuf:"varint,1,opt,name=legacy_endpoint,json=legacyEndpoint,proto3" json:"legacy_endpoint,omitempty"`
	// The number of analytics files that can be buffered before oldest files are dropped.
	// Optional. Default: 1024.
	FileLimit int64 `protobuf:"varint,2,opt,name=file_limit,json=fileLimit,proto3" json:"file_limit,omitempty"`
	// The size of the channel used to buffer record sends in memory.
	// Optional. Default: 10.
	SendChannelSize int64 `protobuf:"varint,3,opt,name=send_channel_size,json=sendChannelSize,proto3" json:"send_channel_size,omitempty"`
}

func (m *ParamsAnalyticsOptions) Reset()                    { *m = ParamsAnalyticsOptions{} }
func (*ParamsAnalyticsOptions) ProtoMessage()               {}
func (*ParamsAnalyticsOptions) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{0, 1} }

func init() {
	proto.RegisterType((*Params)(nil), "config.Params")
	proto.RegisterType((*ParamsProductOptions)(nil), "config.Params.product_options")
	proto.RegisterType((*ParamsAnalyticsOptions)(nil), "config.Params.analytics_options")
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApigeeBase) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.ApigeeBase)))
		i += copy(dAtA[i:], m.ApigeeBase)
	}
	if len(m.CustomerBase) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.CustomerBase)))
		i += copy(dAtA[i:], m.CustomerBase)
	}
	if len(m.OrgName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.OrgName)))
		i += copy(dAtA[i:], m.OrgName)
	}
	if len(m.EnvName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.EnvName)))
		i += copy(dAtA[i:], m.EnvName)
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Secret) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Secret)))
		i += copy(dAtA[i:], m.Secret)
	}
	if len(m.TempDir) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.TempDir)))
		i += copy(dAtA[i:], m.TempDir)
	}
	if m.ClientTimeout != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintConfig(dAtA, i, uint64(m.ClientTimeout.Size()))
		n1, err := m.ClientTimeout.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.ApiKeyClaim) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.ApiKeyClaim)))
		i += copy(dAtA[i:], m.ApiKeyClaim)
	}
	if m.Products != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintConfig(dAtA, i, uint64(m.Products.Size()))
		n2, err := m.Products.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Analytics != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintConfig(dAtA, i, uint64(m.Analytics.Size()))
		n3, err := m.Analytics.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *ParamsProductOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamsProductOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RefreshRate != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfig(dAtA, i, uint64(m.RefreshRate.Size()))
		n4, err := m.RefreshRate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *ParamsAnalyticsOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamsAnalyticsOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LegacyEndpoint {
		dAtA[i] = 0x8
		i++
		if m.LegacyEndpoint {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FileLimit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintConfig(dAtA, i, uint64(m.FileLimit))
	}
	if m.SendChannelSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintConfig(dAtA, i, uint64(m.SendChannelSize))
	}
	return i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Params) Size() (n int) {
	var l int
	_ = l
	l = len(m.ApigeeBase)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.CustomerBase)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.OrgName)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.EnvName)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.TempDir)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.ClientTimeout != nil {
		l = m.ClientTimeout.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.ApiKeyClaim)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Products != nil {
		l = m.Products.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Analytics != nil {
		l = m.Analytics.Size()
		n += 2 + l + sovConfig(uint64(l))
	}
	return n
}

func (m *ParamsProductOptions) Size() (n int) {
	var l int
	_ = l
	if m.RefreshRate != nil {
		l = m.RefreshRate.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}

func (m *ParamsAnalyticsOptions) Size() (n int) {
	var l int
	_ = l
	if m.LegacyEndpoint {
		n += 2
	}
	if m.FileLimit != 0 {
		n += 1 + sovConfig(uint64(m.FileLimit))
	}
	if m.SendChannelSize != 0 {
		n += 1 + sovConfig(uint64(m.SendChannelSize))
	}
	return n
}

func sovConfig(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Params) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Params{`,
		`ApigeeBase:` + fmt.Sprintf("%v", this.ApigeeBase) + `,`,
		`CustomerBase:` + fmt.Sprintf("%v", this.CustomerBase) + `,`,
		`OrgName:` + fmt.Sprintf("%v", this.OrgName) + `,`,
		`EnvName:` + fmt.Sprintf("%v", this.EnvName) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Secret:` + fmt.Sprintf("%v", this.Secret) + `,`,
		`TempDir:` + fmt.Sprintf("%v", this.TempDir) + `,`,
		`ClientTimeout:` + strings.Replace(fmt.Sprintf("%v", this.ClientTimeout), "Duration", "google_protobuf1.Duration", 1) + `,`,
		`ApiKeyClaim:` + fmt.Sprintf("%v", this.ApiKeyClaim) + `,`,
		`Products:` + strings.Replace(fmt.Sprintf("%v", this.Products), "ParamsProductOptions", "ParamsProductOptions", 1) + `,`,
		`Analytics:` + strings.Replace(fmt.Sprintf("%v", this.Analytics), "ParamsAnalyticsOptions", "ParamsAnalyticsOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ParamsProductOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ParamsProductOptions{`,
		`RefreshRate:` + strings.Replace(fmt.Sprintf("%v", this.RefreshRate), "Duration", "google_protobuf1.Duration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ParamsAnalyticsOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ParamsAnalyticsOptions{`,
		`LegacyEndpoint:` + fmt.Sprintf("%v", this.LegacyEndpoint) + `,`,
		`FileLimit:` + fmt.Sprintf("%v", this.FileLimit) + `,`,
		`SendChannelSize:` + fmt.Sprintf("%v", this.SendChannelSize) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringConfig(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApigeeBase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApigeeBase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerBase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerBase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnvName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TempDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TempDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientTimeout == nil {
				m.ClientTimeout = &google_protobuf1.Duration{}
			}
			if err := m.ClientTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKeyClaim", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKeyClaim = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Products", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Products == nil {
				m.Products = &ParamsProductOptions{}
			}
			if err := m.Products.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Analytics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Analytics == nil {
				m.Analytics = &ParamsAnalyticsOptions{}
			}
			if err := m.Analytics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParamsProductOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: product_options: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: product_options: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RefreshRate == nil {
				m.RefreshRate = &google_protobuf1.Duration{}
			}
			if err := m.RefreshRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParamsAnalyticsOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: analytics_options: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: analytics_options: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyEndpoint", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LegacyEndpoint = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileLimit", wireType)
			}
			m.FileLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileLimit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendChannelSize", wireType)
			}
			m.SendChannelSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendChannelSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipConfig(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthConfig = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("adapter/config/config.proto", fileDescriptorConfig) }

var fileDescriptorConfig = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xb1, 0x6f, 0xd4, 0x3e,
	0x14, 0xc7, 0x93, 0xdf, 0xfd, 0x7a, 0xbd, 0xf3, 0xf5, 0x7a, 0xad, 0x85, 0x50, 0x7a, 0x08, 0x73,
	0x2a, 0x03, 0x15, 0x43, 0x4e, 0x82, 0x05, 0x21, 0x84, 0x50, 0x5b, 0x26, 0x10, 0xa0, 0xc0, 0xc4,
	0x62, 0xf9, 0x92, 0x77, 0xa9, 0xd5, 0xc4, 0x8e, 0x6c, 0xa7, 0x52, 0x3a, 0x31, 0xc1, 0xca, 0x9f,
	0xc1, 0x9f, 0xd2, 0xb1, 0x23, 0x23, 0x17, 0x16, 0xc6, 0xfe, 0x09, 0xc8, 0x76, 0x7a, 0x48, 0x45,
	0x62, 0xb2, 0xdf, 0xe7, 0xfb, 0x7d, 0xef, 0xc9, 0xcf, 0x0f, 0xdd, 0x61, 0x19, 0xab, 0x0c, 0xa8,
	0x79, 0x2a, 0xc5, 0x92, 0xe7, 0xdd, 0x11, 0x57, 0x4a, 0x1a, 0x89, 0xfb, 0x3e, 0x9a, 0xde, 0xca,
	0x65, 0x2e, 0x1d, 0x9a, 0xdb, 0x9b, 0x57, 0xa7, 0x24, 0x97, 0x32, 0x2f, 0x60, 0xee, 0xa2, 0x45,
	0xbd, 0x9c, 0x67, 0xb5, 0x62, 0x86, 0x4b, 0xe1, 0xf5, 0xfd, 0xcf, 0x1b, 0xa8, 0xff, 0x8e, 0x29,
	0x56, 0x6a, 0x7c, 0x0f, 0x8d, 0x58, 0xc5, 0x73, 0x00, 0xba, 0x60, 0x1a, 0xa2, 0x70, 0x16, 0x1e,
	0x0c, 0x13, 0xe4, 0xd1, 0x21, 0xd3, 0x80, 0xef, 0xa3, 0x71, 0x5a, 0x6b, 0x23, 0x4b, 0x50, 0xde,
	0xf2, 0x9f, 0xb3, 0x6c, 0x5d, 0x43, 0x67, 0xda, 0x43, 0x03, 0xa9, 0x72, 0x2a, 0x58, 0x09, 0x51,
	0xcf, 0xe9, 0x9b, 0x52, 0xe5, 0x6f, 0x58, 0xe9, 0x24, 0x10, 0x67, 0x5e, 0xfa, 0xdf, 0x4b, 0x20,
	0xce, 0x9c, 0xb4, 0x83, 0x7a, 0xa7, 0xd0, 0x44, 0x1b, 0x8e, 0xda, 0x2b, 0xbe, 0x8d, 0xfa, 0x1a,
	0x52, 0x05, 0x26, 0xea, 0x3b, 0xd8, 0x45, 0xb6, 0x88, 0x81, 0xb2, 0xa2, 0x19, 0x57, 0xd1, 0xa6,
	0x2f, 0x62, 0xe3, 0x63, 0xae, 0xf0, 0x0b, 0xb4, 0x9d, 0x16, 0x1c, 0x84, 0xa1, 0x86, 0x97, 0x20,
	0x6b, 0x13, 0x0d, 0x66, 0xe1, 0xc1, 0xe8, 0xd1, 0x5e, 0xec, 0x87, 0x10, 0x5f, 0x0f, 0x21, 0x3e,
	0xee, 0x86, 0x90, 0x8c, 0x7d, 0xc2, 0x07, 0xef, 0xc7, 0xfb, 0x68, 0xcc, 0x2a, 0x4e, 0x4f, 0xa1,
	0xa1, 0x69, 0xc1, 0x78, 0x19, 0x0d, 0x5d, 0x07, 0x3b, 0x97, 0x57, 0xd0, 0x1c, 0x59, 0x84, 0x9f,
	0xa2, 0x41, 0xa5, 0x64, 0x56, 0xa7, 0x46, 0x47, 0x13, 0x57, 0x9f, 0xc4, 0xdd, 0x87, 0xf8, 0x41,
	0xc6, 0x9d, 0x4c, 0x65, 0x65, 0x7b, 0xe8, 0x64, 0xed, 0xc7, 0xcf, 0xd1, 0x90, 0x09, 0x56, 0x34,
	0x86, 0xa7, 0x3a, 0xda, 0x71, 0xc9, 0xb3, 0x1b, 0xc9, 0x6b, 0x7d, 0x9d, 0xfe, 0x27, 0x65, 0xfa,
	0x16, 0x4d, 0x6e, 0x14, 0xc7, 0xcf, 0xd0, 0x96, 0x82, 0xa5, 0x02, 0x7d, 0x42, 0x15, 0x33, 0xfe,
	0xdb, 0xfe, 0xf9, 0xe4, 0x51, 0x67, 0x4f, 0x98, 0x81, 0xe9, 0x97, 0x10, 0xed, 0xfe, 0xd5, 0x11,
	0x3f, 0x40, 0x93, 0x02, 0x72, 0x96, 0x36, 0x14, 0x44, 0x56, 0x49, 0x2e, 0x8c, 0x2b, 0x3b, 0x48,
	0xb6, 0x3d, 0x7e, 0xd9, 0x51, 0x7c, 0x17, 0xa1, 0x25, 0x2f, 0x80, 0x16, 0xbc, 0xe4, 0xc6, 0xad,
	0x43, 0x2f, 0x19, 0x5a, 0xf2, 0xda, 0x02, 0xfc, 0x10, 0xed, 0x6a, 0x10, 0x19, 0x4d, 0x4f, 0x98,
	0x10, 0x50, 0x50, 0xcd, 0xcf, 0xfd, 0x52, 0xf4, 0x92, 0x89, 0x15, 0x8e, 0x3c, 0x7f, 0xcf, 0xcf,
	0xe1, 0xf0, 0xc9, 0xc5, 0x8a, 0x04, 0x97, 0x2b, 0x12, 0x7c, 0x5f, 0x91, 0xe0, 0x6a, 0x45, 0x82,
	0x4f, 0x2d, 0x09, 0xbf, 0xb5, 0x24, 0xb8, 0x68, 0x49, 0x78, 0xd9, 0x92, 0xf0, 0x47, 0x4b, 0xc2,
	0x5f, 0x2d, 0x09, 0xae, 0x5a, 0x12, 0x7e, 0xfd, 0x49, 0x82, 0x8f, 0xdd, 0xe2, 0x2f, 0xfa, 0xee,
	0x8d, 0x8f, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xd9, 0xae, 0x13, 0xdc, 0x26, 0x03, 0x00, 0x00,
}
